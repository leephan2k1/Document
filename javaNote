Primitive data type:
+byte [8bit] -128 -> 127;
+short [16bit] -32768 -> 32767;
+int [32bit] -2^31 -> 2^31 -1;
+long [64bit] -2^63 -> 2^63 -1;
Vượt ra phạm vi của int nên khai báo: long ex = 214748212L;
+double [64bit] EX: double a=3.2;
+float [32bit] EX: float a = 3.2f;
+char [16bit] unicode

=> For-each 
for(int elements: arr){
	//code
}
=> label break
label:
	for(expression1){
		// code
		for(expression2){
		if(codition) break label;
		// code
		}
	}

CONSTRUCTOR (Có 3 kiểu)
	// Constructor không thể là một abstract, static hoặc final.
	// Constructor có thể overload nhưng không thể override.
	+ Constructor không có đối số
		private Constructor() {
   		// body of constructor
		}
	+ Constructor Default
		Nếu không có Constructor ko đối số nào được tạo, trình biên dịch tự khởi tạo Constructor làm nhiệm vụ khởi tạo các biến thực thể với giá trị mặc định.
		=> https://ibb.co/8jgcrVT
	+ Constructor Parameterized (Tham số hoá)
		Constructor overloading: https://ibb.co/42h4yQ8
2 Quy tắc để khởi tạo 1 Constructor:
	+ Cùng tên với tên Class.
	+ Không có kiểu trả về.
	
STRING
	//String là một lớp trong Java, khác với primitive type (long, int, short, byte, double, char,...)
	+ Một số phương thức trong lớp String: https://ibb.co/pxf3Vpq
	+ Document từ Oracle: https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?fbclid=IwAR2JwZ4AJ6JGcvuSeaablfqq-cUDahBhqRM8peIcHj9Qgl7VmNYULMyVn1U
ACCESS MODIFIER (Có 4 kiểu)
	+ default : Chỉ dùng được trong package ( package private)
	+ private : Chỉ dùng được trong lớp.
	+ protected : Chỉ dùng trong package hoặc subclass
	+ public : Dùng được ở mọi nơi
	+ //Note: Không thể khai báo 1 class và interfaces ở mức private hoặc protected.
KEYWORD:
	//this
	+ this. : Dùng để tham chiếu đến biến instance. Tránh nhầm lẫn khi instance với đối số cùng name.
	+ Biến thể của this. là this() <=> this() để truyền đối số với construct tương ứng khi viết construct overload. VI DU: http://codepad.org/gtwtkSnw
	+ this dùng làm tham số để truyền vào phương thức. VD: http://codepad.org/BtT1QHjG
	//final
	+final dùng để chỉ hằng số. Có thể dùng cho class, variables, method
		//Với Biến: Không thể tái cấp phát 
		//Với medthod: Không thể overload
		//Với class: Không thể extend
		//Các biến final (nên) được viết hoa. VD fianl int MAX = 100;
Inheritance (Kế thừa)
	
	
	
