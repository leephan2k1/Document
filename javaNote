Primitive data type:
+byte [8bit] -128 -> 127;
+short [16bit] -32768 -> 32767;
+int [32bit] -2^31 -> 2^31 -1;
+long [64bit] -2^63 -> 2^63 -1;
	//Vượt ra phạm vi của int cần khai báo: long ex = 214748212L;
+double [64bit] EX: double a=3.2;
+float [32bit] EX: float a = 3.2f;
+char [16bit] unicode

>>> Khi đọc một chuỗi sau 1 số cần thêm 1 dòng đọc kí tự \n để tránh bị đọc nhầm.
	VD: int a = scan.nextInt();
	    String s = scan.nextLine(); => đọc dấu \n => Không đọc được chuỗi.
	    //Fix:
	    int a = scan.nextInt();
	    scan.nextLine(); => đọc dấu \n (Skip \n)
	    String s = scan.nextLine();
>>> Định dạng một text ra console 
	+ https://www.baeldung.com/java-printstream-printf
	+ https://stackoverflow.com/questions/2538787/how-to-print-a-float-with-2-decimal-places-in-java
	+ System.out.printf("%-15s%03d%n",s,x);
	%-15s: in định dạng tiếp theo thụt vào 15 kí tự tính từ chuỗi đầu tiên
	%03d: in ra số nguyên có đầy đủ 3 số, ko đủ thêm số 0 phía trước
	%n: xuống dòng.
	
FOR-EACH
	for(int elements: arr){
		//code
	}
LABEL BREAK
	label:
		for(expression1){
			// code
			for(expression2){
				if(codition) break label;
			}
		}
		// code

CONSTRUCTOR (Có 3 kiểu)
	// Constructor không thể là một abstract, static hoặc final.
	// Constructor có thể overload nhưng không thể override.
	+ Constructor không có đối số
		private Constructor() {
   		// body of constructor
		}
	+ Constructor Default
		Nếu không có Constructor ko đối số nào được tạo, trình biên dịch tự khởi tạo Constructor làm nhiệm vụ khởi tạo các biến thực thể với giá trị mặc định.
		=> https://ibb.co/8jgcrVT
	+ Constructor Parameterized (Tham số hoá)
		Constructor overloading: https://ibb.co/42h4yQ8
		
	+ 2 Quy tắc để khởi tạo 1 Constructor:
		+ Cùng tên với tên Class.
		+ Không có kiểu trả về.
	
STATIC BLOCKS (Khối static) https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html
	+ Khối static dùng để khởi tạo, thực thi các fields, method, instance var,... khi class được load vào memory.
	+ Khối static chỉ chạy một lần, sẽ chạy trước construct (Nếu có) và method main.
	+ VD: https://www.geeksforgeeks.org/g-fact-79/
		//CODE: 
			class TestCase{
				static int i = 0;
				TestCase(){
					System.out.println("Construct called");
				}
				static {
					i = 10;
					System.out.println("Static called");
				}
				public static void main(String[] args) {
					TestCase t = new TestCase();
					System.out.println(t.i);
				}
			}
	 + Ngoài ra, còn có Initializer Block: https://www.geeksforgeeks.org/g-fact-26-the-initializer-block-in-java/
	
STRING
	//String là một lớp trong Java, khác với primitive type (long, int, short, byte, double, char,...)
	+ String là một chuỗi bất biến, không thể xoá, sửa, thay đổi.
	+ Cách cấp phát vùng nhớ cho một lớp String: https://www.geeksforgeeks.org/how-to-initialize-and-compare-strings-in-java/
	+ String s = "Direct"; và String s = new String("!Direct"); sẽ khác nhau về cách tham chiếu giá trị.
	+ Một số phương thức trong lớp String: https://ibb.co/pxf3Vpq
	+ Một số lưu ý sử dụng String, StringBuilder, StringBuffer:
		* Nếu chuỗi không thay đổi trong suốt chương trình, dùng lớp String.
		* Nếu chuỗi thay đổi, và được truy cập 1 luồng (Single Third). Dùng StringBuilder (StringBuilder k sync, k an toàn, nhưng xử lí nhanh hơn).
		* Nếu chuỗi thay đổi, và được truy cập đa luồng (Multi Third). Dùng StringBuffer (StringBuffer có sync, an toàn hơn, nhưng xử lí chậm hơn).
	+ Convert qua lại giữa các lớp String/StringBuilder/StringBuffer: https://www.geeksforgeeks.org/string-vs-stringbuilder-vs-stringbuffer-in-java/
	+ Convert qua lại giữa các số-String, String-số: https://www.geeksforgeeks.org/different-ways-for-integer-to-string-conversions-in-java/
	+ Khi cần xử lí các thành phần tiền tố, hậu tố, trung tố của một chuỗi
		ta dùng lớp StringJoiner: https://www.geeksforgeeks.org/java-util-stringjoiner-java8/
	+ Một số điểm khác nhau giữa các kiểu so sánh 2 objects chuỗi
		VD:
		String s = new String("Hello world"); // s tham chiếu đến "Hello world" trong Heap
		String test = "Hello world"; //test tham chiếu đến String pool area trong Heap
		System.out.println(s.equals(test)); //return: boolean Output: true (Ngoài ra còn có method equalsIgnoreCase, k phân biệt hoa thường)
		System.out.println(s.compareTo(test)); //return: int Output: 0 (Ngoài ra còn có method compareToIgnoreCase, k phân biệt hoa thường)
		System.out.println(s == test); //return: boolean Output: false ( but reference compare  (so sánh địa chỉ, ít dùng cho chuỗi)).
	+ Document từ Oracle: https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?fbclid=IwAR2JwZ4AJ6JGcvuSeaablfqq-cUDahBhqRM8peIcHj9Qgl7VmNYULMyVn1U
ARRAY
	Một Object cũng có thể khởi tạo theo kiểu array
		VD: ClassName[] ObjectName = new ClassName[size];
		ObjectName[0] = new ClassName(Construct);
	Một method trả về array.
		VD: static int[] increase1(int[] arr){
			for(int i = 0; i<arr.length; i++) {
			arr[i]++;
			}
		return arr;
		}
ARRAYS CLASS ( lớp Arrays)
	+
	
ARRAY LIST
	+ ArrayList là một colection framework trong Java. ArrayList không truy cập phần tử dùng [] như array. Tuy nhiên, ArrayList có thể
	sử dụng các method linh hoạt hơn array trong việc thêm, xoá, sửa.
	+ ArrayList chỉ có thể chứa những object được khai báo, không thể chứa những kiểu nguyên thuỷ như array.
	+ array của ArrayList: (Sẽ bị Warning, khắc phục bằng cách dùng ArrayList của ArrayList) 
		Đối với một mảng 2 chiều không biết kích thước của mỗi row là bao nhiêu, sử dụng ArrayList để implement mỗi row cho 2D array.
		VD: https://www.geeksforgeeks.org/array-of-arraylist-in-java/?ref=rp
			int n = 5; 
        		ArrayList<Integer>[] al = new ArrayList[n]; 
			for (int i = 0; i < n; i++) { 
            			al[i] = new ArrayList<Integer>(); 
        		} 
			  for (int i = 0; i < n; i++) { 
            			for (int j = 0; j < al[i].size(); j++) { 
               				 System.out.print(al[i].get(j) + " "); 
            			} 
            			System.out.println(); 
        		} 
	+ ArrayList của ArrayList
		VD: https://www.geeksforgeeks.org/arraylist-of-arraylist-in-java/
		int n = 3;
		ArrayList<	ArrayList<Integer>	> al = new ArrayList<	ArrayList<Integer>	>(n);
		//Row 1
		ArrayList<Integer> al_1 = new ArrayList<Integer>();
		al_1.add(1); 
       		al_1.add(2); 
		al.add(al_1);
		//Row 2
		ArrayList<Integer> al_2 = new ArrayList<Integer>(); 
        	a_2.add(5); 
        	al.add(a_2); 
  		//Row 3
       	 	ArrayList<Integer> al_3 = new ArrayList<Integer>(); 
        	al_3.add(10); 
        	al_3.add(20); 
        	al_3.add(30); 
        	al.add(al_3);
		for (int i = 0; i < aList.size(); i++) { 
            		for (int j = 0; j < aList.get(i).size(); j++) { 
                		System.out.print(aList.get(i).get(j) + " "); 
           	 } 
           	 System.out.println(); 
        	} 
	
	
ACCESS MODIFIER 
	https://www.w3schools.com/java/java_modifiers.asp
	+ abstract (Đối với class): Khi khởi tạo 1 abstract class, thì k thể khởi tạo đối tượng từ class mà chỉ có thể kế thừa.
	(Có 4 kiểu AM)
	+ default : Chỉ dùng được trong package ( package private)
	+ private : Chỉ dùng được trong lớp.
	+ protected : Chỉ dùng trong package hoặc subclass
	+ public : Dùng được ở mọi nơi
	+ //Note: Không thể khai báo 1 class và interfaces ở mức private hoặc protected.
KEYWORD:
	//this
		+ this. : Dùng để tham chiếu đến biến instance. Tránh nhầm lẫn khi instance với đối số cùng name.
		+ Biến thể của this. là this() <=> this() để truyền đối số với construct tương ứng khi viết construct overload. VI DU: http://codepad.org/gtwtkSnw
		+ this dùng làm tham số để truyền vào phương thức. VD: http://codepad.org/BtT1QHjG
	//final
		+final dùng để chỉ hằng số. Có thể dùng cho class, variables, method
		//Với Biến: Không thể tái cấp phát 
		//Với medthod: Không thể overload
		//Với class: Không thể extend
		//Các biến final (nên) được viết hoa. VD fianl int MAX = 100;
	//instanceof (return: true or false)
		+Dùng để kiểm tra một biến thực thể có phải tạo ra từ class hay không
			Ví dụ: 	String name = "Lee";
				boolean check = name instanceof String;
				System.out.println(check) == true.
	//super
		+ Dùng để truy cập vào method lớp cha từ lớp con VD: https://www.programiz.com/java-programming/method-overriding
	//var
		+ Từ JDK 10, var dùng để tham chiếu đến một class khi khởi tạo đối tượng. Nhằm giảm bớt cú pháp khi khởi tạo.
			VD: var list = new ArrayList<String>();
			    var objectName = new className();
Inheritance (5 kiểu Kế thừa)
	+ Single: Lớp B được extends từ lớp A, A->B.
	+ Multilevel: Lớp B extends A, lớp C extends B, A->B->C.
	+ Hierarchical (thứ bậc): Lớp B,C,D,... extends từ lớp A. A->B; A->C; A->D,...
	+ Mutiple: Interface C được extends từ Interface A, Interface B, Interface D,.. A->C, B->C, D->C,...
	+ Hybird: Kết hợp 2 hay nhiều kiểu trên.
	//Java không hỗ trợ Mutiple và Hybird cho kế thừa class, nhưng Interface thì được.
        //Nếu không muốn lớp khác extends từ class đã tạo, thêm từ khoá final (EX: final class Animal{ } )
	//Khi một Object lớp cha tham chiếu đến lớp con, đó còn được gọi là Upcasting.
	>>>Một số lưu ý khi kế thừa:
		+ Các thành phần private của superclass thì lớp con không thể kế thừa
		+ Lớp con có thể kế thừa tất cả thành phần của superclass. Tuy nhiên, Constructors thì không vì nó k phải là một "member" của class
		Constructors của superclass có thể truyền thông qua từ lớp con.
		+ Lớp cha chỉ có duy nhất: Lớp cha có thể có nhiều lớp con. Tuy nhiên, lớp con chỉ có duy nhất lớp cha (Triết lý nhân sinh =)) )
		Trong Java chỉ hỗ trợ kế thừ đa cấp (Mutiple) và kế thừa kết hợp (Hybird) cho Interface.
		+ Trong trường hợp không có lớp cha rõ ràng nào. Thì default superclass được hiểu ngầm là Object class.
Encapsulation (Tính bao đóng)
	+ Tính bao đóng khi có các biến, thuộc tính khai báo kiểu private (Chỉ dùng được trong phạm vi class)
	+ Tính bao đóng dùng các phương thức public set(nhận giá trị) và get() trả về giá trị cho các biến trong Class có dạng private
	>>> Ưu điểm có tính bao đóng:
		+ Ẩn dữ liệu, tăng tính bảo mật: Người dùng chỉ biết truyền và nhận dữ liệu thông qua 2 phương thức get và set, mà không biết trong class đó 
		đang lưu trữ các loại dữ liệu gì.
		+ Tăng tính linh hoạt: Có thể làm cho các biến ở dạng chỉ đọc (Bỏ phương thức set() ) hoặc ở dạng chỉ ghi (Bỏ phương thức get() ). 
		Có thể thay đổi một phần code mà không làm ảnh hưởng đến các phần khác.
		+ Dễ dàng tái sử dụng
		+ Dễ dàng kiểm thử đơn vị (Unit testing)
Overriding và Overloading: https://docs.oracle.com/javase/tutorial/java/IandI/override.html
	//Overriding
		+ Overriding: Được biết là khi method của subclass (CÙNG TÊN, CÙNG SỐ LƯỢNG THAM SỐ, CÙNG KIỂU TRẢ VỀ)
		với method superclass. Khi object gọi method này, method ở subclass sẽ được thực thi.
		+ Ví dụ: https://www.programiz.com/java-programming/method-overriding
	>>> Không thể Overriding với một method final hoặc static. (Chương tình báo lỗi)
	>>> Chỉ nên Overriding một abstract method với lớp cha.
	//Overloading
		+ Overloading: Xảy ra khi các method cùng 1 class (CÙNG TÊN, CÙNG KIỂU TRẢ VỀ, KHÁC SỐ LƯỢNG THAM SỐ)
		+ Ví dụ: https://www.geeksforgeeks.org/overloading-in-java/
		+ Ưu điểm: Chỉ cần tạo ra 1 tên cho method cùng thực hiện chức năng tương tự, bớt rối cho việc đặt tên (VD: sum1, sum2, sum3,...)
	>>> Không thể nạp chồng phương thức (cùng số lượng tham số) nhưng khác kiểu trả về.
	>>> Có thể nạp chồng phương thức kiểu static: https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/
	>>> Không thể nạp chồng 2 phương thức khác keyword static (Cùng tham số): https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/
	>>> Tự động ép kiểu nếu tham số truyền vào không khớp với tham số định nghĩa: https://viettuts.vn/images/java/nap-chong-trong-java-1.jpg
	>>> Có thể nạp chồng phương thức main: https://www.geeksforgeeks.org/overloading-in-java/
	>>> Java không cho phép nạp chồng toán tử như C++
	*** Khác biệt giữa Overriding và OverLoading: https://imgur.com/a/MZdw2Bw
Abstract Class (Lớp trừu tượng)
	+ Sử dụng keyword abstract để khai báo 1 abstract class
	+ Không thể tạo object từ 1 abstract class
	+ Có thể extends 1 class con từ 1 abstract class.
	+ Một abstract class được khai báo ra để chứa các abstract method (Có thể có hoặc không). Các abstract method được định nghĩa ra cho các 
	lớp con xử lí (Ví dụ khi ta nhấn phanh ga , ta chỉ biết là xe dừng lại. Chứ ko biết phanh ga hoạt động như thế nào)
		VD chi tiết: https://www.programiz.com/java-programming/abstract-classes-methods
	+ Một abstract method khai báo chỉ để định nghĩa, ko có gì trong body method này. 
		VD abstract void show();
	>>> Chỉ có abstract class mới có thể chứa abstract method. Nếu khai báo 1 abstract method trong một class ko là kiểu abstract chương trình báo lỗi!
	>>> Để truy cập vào method trong abstract class, cần extends subclass để kế thừa và gọi từ lớp con.
	>>> Bắt buộc phải ghi đè (Override) abstract method từ superclass, nếu subclass cũng là abstract thì khỏi cần override.
	*** So sánh giữa một Data Abstract và Encapsulation
		+ Thông tin thuộc tính bao đóng được ẩn đi, trong khi đó Abstract sẽ ẩn ở mức độ chi tiết (Ẩn cách thực thi của một phương thức)
		+ Trong khi tính bao đóng nhóm các dữ liệu và các phương thức hoạt động dựa trên dữ liệu, còn Abstract hiển thị giao diện (interface)
		cho người dùng và ẩn đi các chi tiết triển khai.
	>>> Ưu điểm: 
		+ Tránh trùng lặp code và tái sử dụng
		+ Tăng cường tính bảo mật của chương trình, ứng dụng khi cung cấp cho người dùng.
Interface
	+ Interface là một bản thiết kế cho class để class tuân theo và thực thi. Interface mặc định các abstract method và các fields ở dạng public static final.
	+ Tương tự như abstract class, interface không thể tạo ra object.
	+ Sử dụng từ khoá 'implements' để triển khai 1 interface từ 1 class khác.
		VD: http://codepad.org/k5VTz3oN
	+ 1 class có thể implemnts một lúc nhiều interface.
		VD: http://codepad.org/Z9FwBKfP
	+ 1 interface có thể extends (kế thừa) nhiều interface khác (Kế thừa mutiple, 1 interface con có nhiều interface cha).
	+ Trong JDK 8 về sau. Một interface có thể gọi một phương thức mà không cần implements từ class thông qua đối tượng.
		VD: https://www.geeksforgeeks.org/interfaces-in-java/
	>>> Một lớp implements từ interface phải triển khai tất cả các method được định nghĩa trong interface.
	>>> interface được dùng để kế thừa đa cấp, và dùng để đạt loosing coupling (https://en.wikipedia.org/wiki/Loose_coupling)
	*** Có 2 interface sort object thành phần data trong Java: https://www.geeksforgeeks.org/comparable-vs-comparator-in-java/
	... 
Polymorphism
	+ Có 2 kiểu đa hình: Đa hình lúc biên dịch (compile) và đa hình lúc thực thi (runtime)
	+ Thực hiện đa hình bằng cách nạp chồng (Overload) hoặc ghi đè (Override) phương thức.
	+ Với đa hình trong lúc runtime do Override. Đa hình do JVM đảm nhận chứ k thuộc Compiler.
	+ Đa hình lúc runtime không thể xảy ra với thành viên dữ liệu.
		VD: https://viettuts.vn/java/tinh-da-hinh-trong-java
Nested và Inner Class trong Java
	// Class lồng nhau (Nested class)
	
	
	
	
	
		
	
	
	
	
		
	
	
	
	
	
	
